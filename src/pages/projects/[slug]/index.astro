---
import type { GetStaticPaths } from "astro";
import { getEntry, render } from "astro:content";
import { getCollection } from "astro:content";
import { cn } from "@/lib/utils";
import { Icon } from "astro-icon/components";
import { Image } from "astro:assets";
import BlogLayout from "@/layouts/BlogLayout.astro";
import Head from "@/components/Head.astro";
import { CodeIcon, GlobeIcon } from "lucide-react";

export const getStaticPaths = (async () => {
  const projects = await getCollection("projects");
  return projects.map(({ id }) => ({ params: { slug: id } }));
}) satisfies GetStaticPaths;

const { slug } = Astro.params;

const project = await getEntry("projects", slug);
if (!project) {
  throw new Error("Could not find blog post 1");
}
const { Content, headings } = await render(project);
---

<Head title={project.data.title} />
<BlogLayout headings={headings}>
  <slot slot="details">
    <Image
      src={project.data.image}
      alt={"Image for " + project.data.title}
      class={"w-full"}
    />
    <h1 class={cn("text-4xl font-bold mt-10")}>{project.data.title}</h1>
    <p class={cn("text-lg mt-4")}>{project.data.description}</p>
    <div class="flex gap-4">
      {
        project.data.liveUrl && (
          <a
            href={project.data.liveUrl}
            class={cn(
              "text-primary-500 dark:text-primary-400 hover:underline mt-4 text-sm flex items-center",
            )}
          >
            <GlobeIcon size={16} className={cn("mr-1")} />
            <span>Live Demo</span>
          </a>
        )
      }
      {
        project.data.sourceUrl && (
          <a
            href={project.data.sourceUrl}
            class={cn(
              "text-primary-500 dark:text-primary-400 hover:underline mt-4 text-sm flex items-center",
            )}
          >
            <CodeIcon size={16} className={cn("mr-1")} />
            <span>Source Code</span>
          </a>
        )
      }
    </div>
    <ol class="flex gap-4 mt-4">
      {
        project.data.tags.map(async ({ id: tagId }) => {
          const tag = await getEntry("tags", tagId);
          if (!tag) {
            return null;
          }
          return (
            <li class={cn("text-sm text-neutral-500 dark:text-neutral-400")}>
              <Icon
                name={tag.data.icon}
                class={cn("w-4 h-4 inline-block mr-2")}
              />
              {tag.data.text}
            </li>
          );
        })
      }
    </ol>
  </slot>
  <slot slot="content">
    <Content />
  </slot>
</BlogLayout>
